### This file animates synthetic trajectories generated in model_generate.py file.

### INPUTS - synthetic_trajs.json : trajectories generated by the trained GMM model in model_generate.py.
###        - test_input.json : runway, procedural information for test.
###        - animation_filename (used for saving output file.)

### OUTPUT - animation file ('animation_filename'.html) : Do not need to plug in as input.


import numpy as np
import time, datetime
import json
import os, argparse

import folium
from folium import plugins
from PIL import Image
import io, requests

from scipy.interpolate import interp1d, PchipInterpolator
import pymap3d as pm


parser = argparse.ArgumentParser()
parser.add_argument("-i", "--input_files", nargs="*", required=True, help='synthetic_trajs.json, test_input.json animation_filename')
args = parser.parse_args()


# load synthetic_trajs.json file
with open(args.input_files[0], "r") as f:
    syn_trajs = json.load(f)
    
# load test_input.json file
with open(args.input_files[1], "r") as f:
    data = json.load(f)
    
os.makedirs('output', exist_ok=True)


M_TO_NM = 0.000539957
M_TO_FT = 3.28084


# smooth trajs to have a point at each second.
syn_trajs_new = []
for i, traj in enumerate(syn_trajs):
    traj = np.array(traj)
    t = traj[:,0]
    t_smooth = np.arange(t.min().astype(int), t.max().astype(int)+1)

    traj_smooth = np.zeros((t_smooth.shape[-1], 4))
    traj_smooth[:, 0] = t_smooth
    traj_smooth[:, 1] = PchipInterpolator(t, traj[:,1])(t_smooth)
    traj_smooth[:, 2] = PchipInterpolator(t, traj[:,2])(t_smooth)
    traj_smooth[:, 3] = PchipInterpolator(t, traj[:,3])(t_smooth)
    
    syn_trajs_new.append(traj_smooth)
syn_trajs = syn_trajs_new

min_t = np.min(syn_trajs[0][:,0])
max_t = np.max(syn_trajs[len(syn_trajs)-1][:,0])


# airport, runway configuration
airport_name = data["airport_name"]  #"KJFK"
airport_lat, airport_lon, airport_altitude = data["airport_coordinate"]
# runways_config = data["runways_configuration"]["rwy_names"]
# runways_config_coordinates = data["runways_configuration"]["rwy_coordinates"]


# Map, Fullscreen, Multple layers
m = folium.Map(location=(airport_lat, airport_lon), tiles=None, zoom_start=10)
plugins.Fullscreen(position='topleft', title='FullScreen', title_cancel='Exit',
                   force_separate_button=True).add_to(m)
folium.raster_layers.TileLayer('OpenStreetMap').add_to(m)
folium.raster_layers.TileLayer('Stamen Terrain').add_to(m)
folium.LayerControl().add_to(m)


# airport icon
folium.Marker(location=(airport_lat, airport_lon), popup=airport_name).add_to(m)

# aircraft icon
url = 'https://png.icons8.com/material-outlined/80/000000/airplane-mode-on.png'
image = Image.open(io.BytesIO(requests.get(url).content))
    

t_range = np.arange(min_t, max_t)
points=[]
start_t = datetime.datetime.now()

for t in t_range:
    for i, traj in enumerate(syn_trajs): #for each traj.
        ind = np.where(traj[1:,0]==t)[0]
        
        if ind!=None:
            point = {}
            curr_t = start_t + datetime.timedelta(seconds=t.tolist()-min_t)
            point['time'] = curr_t.strftime('%Y-%m-%dT%H:%M:%S')

            # aircraft icon image with rotating headings
            curr_xEast = traj[ind,1]  #(m)   
            curr_yNorth = traj[ind,2]  #(m)
            curr_zUp = traj[ind,3]/10  #(m)
            curr_lat, curr_lon, curr_alt = pm.enu2geodetic(curr_xEast, curr_yNorth, curr_zUp, airport_lat, airport_lon, airport_altitude)
            curr_alt *= M_TO_FT
            point['coordinates'] = [curr_lon[0], curr_lat[0]]
            
            prev_xEast = traj[ind-1,1]  #(m)   
            prev_yNorth = traj[ind-1,2]  #(m)
            prev_zUp = traj[ind-1,3]/10  #(m)
            prev_lat, prev_lon, prev_alt = pm.enu2geodetic(prev_xEast, prev_yNorth, prev_zUp, airport_lat, airport_lon, airport_altitude)
            prev_alt *= M_TO_FT

            heading = np.arctan2(curr_lat-prev_lat, curr_lon-prev_lon) * 180 / np.pi
            rotated_image = image.rotate(heading)
            rotated_image.save('data/rotated_plane.png')

            icon_url = folium.utilities.image_to_url('data/rotated_plane.png')
            point['icon_url'] = icon_url
            points.append(point)


    
features = [{
                "type": "Feature",
                "geometry": {
                    "type": "Point",
                    "coordinates": point['coordinates'],
                    },
                "properties": {
                    "time": point['time'],
                    "id":"plane",
                    'icon':'marker',
                    'iconstyle':{
                        'iconUrl': point['icon_url'],
                        'iconSize': [20, 20]
                        }
                    }
                } for point in points]


plugins.TimestampedGeoJson(
    {
        'type': 'FeatureCollection',
        'features': features
    },
    period='PT10S',
    add_last_point=True,
    auto_play=False,
    loop=False, 
    loop_button=True,
    max_speed=0.1,
    time_slider_drag_update=False,
    duration='PT0S'
).add_to(m)

m.save(args.input_files[2])

